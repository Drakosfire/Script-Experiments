import os
from pydantic import Field
from typing import List, Mapping, Optional, Any
from langchain.llms.base import LLM

class CustomLLM(CustomLLM):
    """ A custom LLM clas that integrates my preferred open source model and allows the use of GPTQ. 
    Speechless-Llama2-Hermes-Orca-Platypus-WizardLM-13B-GPTQ

    Arguments:

    model_folder_path: (str) Folder path where the model lies
    model_name: (str) The name of the model to use (<model name>.bin)
    allow_download: (bool) whether to download the model or not

    backend: (str) The backend of the model (Supported: llama/gptj)
    n_threads: (str) The number of threads to use
    n_predict: (str) The maximum numbers of tokens to generate
    temp: (str) Temperature to use for sampling
    top_p: (float) The top-p value to use for sampling
    top_k (float) The top k values use for sampling
    repeat_last_n: (int) Last n number of tokens to penalize
    repeat_penalty: (float) The penalty to apply repeated tokens

    """

    model_folder_path: str = Field(None, alias='model_folder_path')
    model_name: str = Field(None, alias='model_name')
    allow_download: bool = Field(None, alias='allow_download')

    # All the optional arguments

    backend:        Optional[str]   = 'llama'
    top_p:          Optional[float] = 0.1
    top_k:          Optional[int]   = 40
    max_tokens:     Optional[int]   = 200
    n_threads:      Optional[int]   = 4
    n_predict:      Optional[int]   = 256
    temp:           Optional[float] = 0.7
    repeat_last_n:  Optional[int]   = 64
    repeat_penalty: Optional[float] = 1.18


    # initialize the model
    llm_model_instance:Any = None 

    def __init__(self, model_folder_path, model_name, allow_download, **kwargs):
        super(MyGPT4ALL, self).__init__()
        self.model_folder_path: str = model_folder_path
        self.model_name = model_name
        self.allow_download = allow_download
        
        # trigger auto download
        self.auto_download()

        self.llm_model_instance = GPT4All(
            model_name=self.model_name,
            model_path=self.model_folder_path,
        )

    @property
    def _get_model_default_parameters(self):
        return {
            "max_tokens": self.max_tokens,
            "n_predict": self.n_predict,
            "top_k": self.top_k,
            "top_p": self.top_p,
            "temp": self.temp,
            "n_batch": self.n_batch,
            "repeat_penalty": self.repeat_penalty,
            "repeat_last_n": self.repeat_last_n,
        }

    @property
    def _identifying_params(self) -> Mapping[str, Any]:
        """
        Get all the identifying parameters
        """
        return {
            'model_name' : self.model_name,
            'model_path' : self.model_folder_path,
            'model_parameters': self._get_model_default_parameters
        }
    
    def _call(self, prompt: str, stop: Optional[List[str]] = None, **kwargs):
        """
        Args:
            prompt: The prompt to pass into the model.
            stop: A list of strings to stop generation when encountered

        Returns:
            The string generated by the model        
        """
        
        params = {
            **self._get_model_default_parameters, 
            **kwargs
        }

        response = self.llm_model_instance.generate(prompt, **params)
        return response